# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
from __future__ import annotations

import os
from collections import OrderedDict
from copy import deepcopy
from pathlib import Path

from .dsl import expand_dicts, parse_aims_input
from .errors import InvalidInput
from .pluggable import Pluggable, Plugin

__version__ = "0.2.0"
__all__ = ()


class AimsPlugin(Plugin):
    def process(self, kwargs):
        raise NotImplementedError()


class Aims(Pluggable):
    """Generates FHI-aims input files ``control.in`` and ``geometry.in``.

    The creation of the inputs files is handeld by a series of plugins that process
    keyword arguments passed to the instance of :class:`Aims` to generate
    ``control.in`` and ``geometry.in``. The default plugins are created with no
    extra arguments. Custom plugins can be registered by calling them with the
    :class:`Aims` instance as an argument.

    Requires the ``AIMS_SPECIES_DEFAULTS`` environment variable that points to the
    ``species_defaults`` Aims directory.
    """

    plugin_factories = []
    """List of plugins run in this order."""

    def __init__(self):
        Pluggable.__init__(self)
        for factory in Aims.plugin_factories:
            factory()(self)

    def __call__(self, **kwargs):
        """Create an Aims task.

        :param kwargs: keyword arguments processed by plugins
        :param label: passed to :func:`~mona.dirtask.dir_task`

        Existing keywords (some are generated by plugins, see below):

        - ``atoms``: List of two-tuples of a species and a coordinate.
        - ``geom``: Instance of :class:`~mona.sci.geomlib.Molecule`.
        - ``species_specs``: List of species specifications.
        - ``tags``: Dictionary of tags for ``control.in``.
        """
        self.run_plugins("process", kwargs)
        inputs = {name: kwargs.pop(name) for name in ["control.in", "geometry.in"]}
        if kwargs:
            raise InvalidInput(f"Unknown Aims kwargs: {list(kwargs.keys())}")
        return inputs


class Atoms(AimsPlugin):
    """Aims plugin handling geometry.

    Keywords processed: ``atoms``. Keywords added: ``geom``.
    """

    def process(self, kwargs):
        if "atoms" in kwargs:
            kwargs["geom"] = kwargs.pop("atoms")


class SpeciesDefaults(AimsPlugin):
    """Aims plugin handling species specifications.

    :param mod: Callable that is passed the species specifications for modification.

    Keywords added: ``species_specs``. Keywords used: ``geom``, ``species_defaults``.
    """

    def __init__(self, mod=None):
        self._species_defs = {}
        self._mod = mod

    def process(self, kwargs):
        speciesdir = Path(os.environ["AIMS_SPECIES_DEFAULTS"]) / kwargs.pop(
            "species_defaults"
        )
        all_species = {atom[0] for atom in kwargs["geom"]}
        species_specs = []
        for species in sorted(all_species):
            if (speciesdir, species) not in self._species_defs:
                species_def = parse_aims_input(
                    next(iter(speciesdir.glob(f"*_{species}_default"))).read_text()
                )["species"][0]
                self._species_defs[speciesdir, species] = species_def
            else:
                species_def = self._species_defs[speciesdir, species]
            species_specs.append(species_def)
        if self._mod:
            species_specs = deepcopy(species_specs)
            self._mod(species_specs, kwargs)
        kwargs["species_specs"] = species_specs


class Control(AimsPlugin):
    """Aims plugin generating ``control.in``.

    Keywords processed: ``species_specs``, ``tags``. Keywords added: ``control.in``.
    """

    def process(self, kwargs):
        species_tags = []
        for spec in kwargs.pop("species_specs"):
            spec = OrderedDict(spec)
            while spec:
                tag, value = spec.popitem(last=False)
                if tag == "angular_grids":
                    species_tags.append((tag, value))
                    for grid in spec.pop("grids"):
                        species_tags.extend(grid.items())
                elif tag == "basis":
                    for basis in value:
                        species_tags.extend(basis.items())
                else:
                    species_tags.append((tag, value))
        species_tags = [(t, expand_dicts(v)) for t, v in species_tags]
        tags = [*kwargs.pop("tags").items(), *species_tags]
        lines = []
        for tag, value in tags:
            if value is None:
                continue
            if value == ():
                lines.append(tag)
            elif isinstance(value, list):
                lines.extend(f"{tag}  {p2f(v)}" for v in value)
            else:
                lines.append(f"{tag}  {p2f(value)}")
        kwargs["control.in"] = "\n".join(lines)


class Geom(AimsPlugin):
    """Aims plugin generating ``geometry.in``.

    Keywords processed: ``geom``. Keywords added: ``geometry.in``.
    """

    def process(self, kwargs):
        kwargs["geometry.in"] = "\n".join(
            f"atom {x} {y} {z} {sp}" for sp, x, y, z in kwargs.pop("geom")
        )


Aims.plugin_factories = [Atoms, SpeciesDefaults, Control, Geom]


def p2f(value, nospace=False):
    if isinstance(value, bool):
        return f".{str(value).lower()}."
    if isinstance(value, tuple):
        return (" " if not nospace else ":").join(p2f(x) for x in value)
    if isinstance(value, dict):
        return " ".join(
            f"{p2f(k)}={p2f(v, nospace=True)}" if v is not None else f"{p2f(k)}"
            for k, v in sorted(value.items())
        )
    return str(value)
